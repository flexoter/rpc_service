// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `storage_service.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:storage_service_another.SaveDataRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SaveDataRequest {
    // message fields
    // @@protoc_insertion_point(field:storage_service_another.SaveDataRequest.key)
    pub key: ::std::string::String,
    // @@protoc_insertion_point(field:storage_service_another.SaveDataRequest.data)
    pub data: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:storage_service_another.SaveDataRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SaveDataRequest {
    fn default() -> &'a SaveDataRequest {
        <SaveDataRequest as ::protobuf::Message>::default_instance()
    }
}

impl SaveDataRequest {
    pub fn new() -> SaveDataRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &SaveDataRequest| { &m.key },
            |m: &mut SaveDataRequest| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &SaveDataRequest| { &m.data },
            |m: &mut SaveDataRequest| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SaveDataRequest>(
            "SaveDataRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SaveDataRequest {
    const NAME: &'static str = "SaveDataRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.key = is.read_string()?;
                },
                18 => {
                    self.data = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        if !self.data.is_empty() {
            os.write_string(2, &self.data)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SaveDataRequest {
        SaveDataRequest::new()
    }

    fn clear(&mut self) {
        self.key.clear();
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SaveDataRequest {
        static instance: SaveDataRequest = SaveDataRequest {
            key: ::std::string::String::new(),
            data: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SaveDataRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SaveDataRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SaveDataRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SaveDataRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:storage_service_another.SaveDataResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SaveDataResponse {
    // message fields
    // @@protoc_insertion_point(field:storage_service_another.SaveDataResponse.err_msg)
    pub err_msg: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:storage_service_another.SaveDataResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SaveDataResponse {
    fn default() -> &'a SaveDataResponse {
        <SaveDataResponse as ::protobuf::Message>::default_instance()
    }
}

impl SaveDataResponse {
    pub fn new() -> SaveDataResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "err_msg",
            |m: &SaveDataResponse| { &m.err_msg },
            |m: &mut SaveDataResponse| { &mut m.err_msg },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SaveDataResponse>(
            "SaveDataResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SaveDataResponse {
    const NAME: &'static str = "SaveDataResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.err_msg = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.err_msg.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.err_msg);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.err_msg.is_empty() {
            os.write_string(1, &self.err_msg)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SaveDataResponse {
        SaveDataResponse::new()
    }

    fn clear(&mut self) {
        self.err_msg.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SaveDataResponse {
        static instance: SaveDataResponse = SaveDataResponse {
            err_msg: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SaveDataResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SaveDataResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SaveDataResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SaveDataResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:storage_service_another.GetDataRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetDataRequest {
    // message fields
    // @@protoc_insertion_point(field:storage_service_another.GetDataRequest.key)
    pub key: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:storage_service_another.GetDataRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetDataRequest {
    fn default() -> &'a GetDataRequest {
        <GetDataRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetDataRequest {
    pub fn new() -> GetDataRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &GetDataRequest| { &m.key },
            |m: &mut GetDataRequest| { &mut m.key },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetDataRequest>(
            "GetDataRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetDataRequest {
    const NAME: &'static str = "GetDataRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.key = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetDataRequest {
        GetDataRequest::new()
    }

    fn clear(&mut self) {
        self.key.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetDataRequest {
        static instance: GetDataRequest = GetDataRequest {
            key: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetDataRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetDataRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetDataRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetDataRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:storage_service_another.GetDataResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetDataResponse {
    // message fields
    // @@protoc_insertion_point(field:storage_service_another.GetDataResponse.data)
    pub data: ::std::string::String,
    // @@protoc_insertion_point(field:storage_service_another.GetDataResponse.err_msg)
    pub err_msg: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:storage_service_another.GetDataResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetDataResponse {
    fn default() -> &'a GetDataResponse {
        <GetDataResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetDataResponse {
    pub fn new() -> GetDataResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &GetDataResponse| { &m.data },
            |m: &mut GetDataResponse| { &mut m.data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "err_msg",
            |m: &GetDataResponse| { &m.err_msg },
            |m: &mut GetDataResponse| { &mut m.err_msg },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetDataResponse>(
            "GetDataResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetDataResponse {
    const NAME: &'static str = "GetDataResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data = is.read_string()?;
                },
                18 => {
                    self.err_msg = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.data);
        }
        if !self.err_msg.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.err_msg);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.data.is_empty() {
            os.write_string(1, &self.data)?;
        }
        if !self.err_msg.is_empty() {
            os.write_string(2, &self.err_msg)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetDataResponse {
        GetDataResponse::new()
    }

    fn clear(&mut self) {
        self.data.clear();
        self.err_msg.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetDataResponse {
        static instance: GetDataResponse = GetDataResponse {
            data: ::std::string::String::new(),
            err_msg: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetDataResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetDataResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetDataResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetDataResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15storage_service.proto\x12\x17storage_service_another\"7\n\x0fSaveD\
    ataRequest\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x12\n\x04data\
    \x18\x02\x20\x01(\tR\x04data\"+\n\x10SaveDataResponse\x12\x17\n\x07err_m\
    sg\x18\x01\x20\x01(\tR\x06errMsg\"\"\n\x0eGetDataRequest\x12\x10\n\x03ke\
    y\x18\x01\x20\x01(\tR\x03key\">\n\x0fGetDataResponse\x12\x12\n\x04data\
    \x18\x01\x20\x01(\tR\x04data\x12\x17\n\x07err_msg\x18\x02\x20\x01(\tR\
    \x06errMsg2\xc9\x01\n\x07Storage\x12`\n\tStoreData\x12(.storage_service_\
    another.SaveDataRequest\x1a).storage_service_another.SaveDataResponse\
    \x12\\\n\x07GetData\x12'.storage_service_another.GetDataRequest\x1a(.sto\
    rage_service_another.GetDataResponseb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(SaveDataRequest::generated_message_descriptor_data());
            messages.push(SaveDataResponse::generated_message_descriptor_data());
            messages.push(GetDataRequest::generated_message_descriptor_data());
            messages.push(GetDataResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
